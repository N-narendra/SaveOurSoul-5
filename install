set +x;
RC='\033[0m' RED='\033[0;31m' BRED='\033[1;31m' GRAY='\033[1;30m' BLUE='\033[0;34m' BBLUE='\033[1;34m' CYAN='\033[0;34m' CYAN='\033[1;34m' WHITE='\033[1;37m' GREEN='\033[0;32m' BGREEN='\033[1;32m' YELLOW='\033[1;33m' PURPLE='\033[0;35m' BPURPLE='\033[1;35m' ORANGE='\033[0;33m';
setenforce 0 > /dev/null 2>&1; #set To Premissive
EN="$(CDPATH= cd -- "$(dirname -- "$0")" && pwd)"; #going back from eng folder to set env-path 
OLDPATH="$PATH"; #old PATH
PATH="$EN/bin:$PATH"; #env-path setup
IMGT="$EN/imgtmp";
function cleanup () 
{ 
    
        [ -d "$IMGT" ] && rm -rf "$IMGT" > /dev/null 2>&1;
        nout rm -rf "$EN";
        PATH="$OLDPATH";
        :;
};
function 7z () {
    7za "$@" 
}
function audio ()
{
    alsa_aplay "$@" > /dev/null 2>&1
}
function ecpio () 
{ 
    scpio "$@"
};
function ecp () 
{ 
    cp -r "$@"
};
function egzip () 
{ 
    sgzip "$@"
};
function egunzip () 
{ 
    sgzip -d "$@"
};

function endjob () 
{ 
    if [ "$1" = "-b" ]; then
        echo -e "\n\e[91;1m++++++ System structure not supported ...\e[0m";
        cleanup;
        exit 1;
    fi;
    echo -e "\n\e[91;1m+++ Something went wrong, the installation can not be continue ...\n$@\e[0m";
    sleep 5;
    cleanup;
    exit 1
};
function greboot () 
{ 
    
    sleep 5;
    if [ "$(getprop sys.boot_completed)" = "1" ]; then
        [ ! "$(fgconsole)" = "7" ] && chvt 7;
        su -c 'am start -a android.intent.action.REBOOT > /dev/null 2>&1';
        cleanup;
        sleep 15 && reboot;
    else
        cleanup;
        reboot;
    fi
};
function geco () {
    echo -e "$@"
}
function gslr () 
{ 
    LII=$(grep -n "$2" "$1" | head -n1 | cut -d : -f1);
    if [ -n "$LII" ]; then
        LI=$(geco $LII | awk '{print $1}');
        sed -i "${LI}s/.*/${3}/" "$1";
    else
        echo -e "\e[W [gslr:2], some conflicts occurred";
    fi
};
function check_endjob () 
{ 
    RETVAL="$?";
    [ "$RETVAL" != "0" ] && endjob "++++ Error Code: $RETVAL $@"
};
function ckdirex () 
{ 
    if [ -n "$1" ] && [ -n "$2" ]; then
        if [ ! -d "$1" ]; then
            mkdir "$1";
            chmod "$2" "$1";
            chown root:root -h "$1";
        fi;
    else
        if [ ! -d "$1" ]; then
            mkdir "$1";
            chown root:root -h "$1";
        fi;
    fi
};
function ersync () {
    srsync -a "$@"
};
function nout () 
{ 
    "$@" > /dev/null 2>&1
};
function mount_osroot () 
{ 
    geco "${BLUE}\n\n ------- Partition Table -------${RC}\n";
    echo -e "\e[96;1m"
    blkid -s LABEL -s TYPE | grep -v loop | nl -s "]. " | awk 'NF';
    while true; do
        geco "\n+${YELLOW} Enter the ${RC}${YELLOW}partition${RC}${YELLOW} number where you got this${RC} ${YELLOW}Android-x86 OS${RC}${YELLOW} Installed${RC} >> \c";
        read "c";
        if [ -z "$c" ] || [ "$c" = "0" ] || [ -z "$(blkid -s LABEL -s TYPE | grep -v loop | awk 'NF' | sed -n "$c p" | cut -d : -f1)" ]; then
            geco "\n+ Wrong input, please enter again correctly ...";
        else
            geco "\n${YELLOW}+ Trying to mount it ...${RC}";
            ckdirex /mnt 755;
            VAR_OROOT="$(blkid -s LABEL -s TYPE | grep -v loop | awk 'NF' | sed -n "$c p" | cut -d : -f1)";
            RMOUNT="/mnt/Sengine";
            ckdirex "$RMOUNT" 777;
            if [ -n "$(blkid $VAR_OROOT | grep "TYPE=\"vfat\"")" ]; then
                mount -t vfat -o rw "$VAR_OROOT" "$RMOUNT";
            else
                mount -o loop,rw "$VAR_OROOT" "$RMOUNT";
            fi;
            [ -z "$(ls -A "$RMOUNT")" ] && endjob "++++ Seems like it failed to mount it ...";
            break;
        fi;
    done
    echo -e "\e[0m"
};
function get_osroot () 
{ 
    BIMGVAR="$(cat /proc/cmdline | awk -F'BOOT_IMAGE=' '{print $2}' | awk '{print $1}')";
    SRCVAR="$(cat /proc/cmdline | awk -F'SRC=' '{print $2}' | awk '{print $1}')";
    if [ -z "$SRCVAR" -a -n "$BIMGVAR" ]; then
        OSROOT="$RMOUNT$(dirname "$BIMGVAR")";
    else
        if [ "$SRCVAR" = "/" ]; then
            OSROOT="$RMOUNT";
        else
            OSROOT="$RMOUNT$SRCVAR";
        fi;
    fi
};

function txt (){

nout touch $OSROOT/ghost.sos  
};

function get_ramdisk () 
{ 
    geco "\e[93;1m\n+ Getting ramdisk : \e[0m\c";
    sleep 1;
    [ -d "$IMGT" ] && rm -rf "$IMGT" > /dev/null 2>&1;
    mkdir "$IMGT";
        if [ -e "$OSROOT/initrd-stock.img" ]; then
            IRN="$OSROOT/initrd-stock.img";
        else
            if [ -e "$OSROOT/initrd.img" ]; then
                IRN="$OSROOT/initrd.img";
            fi;
        fi;
    if [ -f "$OSROOT/ramdisk.img" ]; then
        ecp "$OSROOT/ramdisk.img" "$IMGT/ramdisk.gz" && check_endjob;
    else
        endjob "++++ Failed to retrieve ramdisk ...";
    fi;
    if [ -f "$IRN" ]; then
        ecp "$IRN" "$IMGT/initrd.gz" && check_endjob;
    else
        endjob "++++ Failed to retriev initrd ...";
    fi;
    echo -e "\e[93;1mDone\e[0m"
};
function extract_ramdisk () 
{ 
    echo -e "\n\e[93;1m+ Extracting Ramdisk : \c\e[0m";
    sleep 0.5;
    egunzip "$IMGT/ramdisk.gz" "$IMGT/initrd.gz";
    [ ! -f "$IMGT/ramdisk" ] && [ ! -f "$IMGT/initrd" ] && endjob "++++ Ramdisk image missing in temporary environment ...";
    ckdirex "$IMGT/initram";
    ckdirex "$IMGT/secram";
    cd "$IMGT/initram";
    nout ecpio -i -F ../initrd;
    [ -z "$(ls -A "$IMGT/initram")" ] && endjob "++++ Failed to extract initrd  ....";
    cd "$IMGT/secram";
    nout ecpio -i -F ../ramdisk;
    [ -z "$(ls -A "$IMGT/secram")" ] && endjob "++++ Failed to extract secondary ramdisk ....";
    echo -e "\e[93;1mDone\e[0m"
};
function patch_ramdisk () 
{ 
    echo -e  "\n\e[94;1m+ Patching Initial System : \c\e[0m";
    sleep 1;
    [ ! -e "$IMGT/initram/init" ] && endjob "++++ Failed to patch Initial initrd ...";
    gslr "$IMGT/initram/init" "mount_fs" "mount_fs; mount_gs";
    ecp "$EN/initrd/G-mount" "$IMGT/initram/scripts"
    chmod 644 "$IMGT/initram/scripts/G-mount"
    echo -e "\e[93;1mDone\e[0m";
    echo -e "\n\e[92;1m+ Patching secondary ramdisk : \c\e[0m";
    sleep 1;
    if [ -e "/system/lib64" ]; then
        TARCH="x86_64";
    else
        TARCH="x86";
    fi;
    if [ -e "$IMGT/secram/init.android_$TARCH.rc" ]; then
        INITRC="$IMGT/secram/init.android_$TARCH.rc";
    else
        if [ -e "$IMGT/secram/init.remix_$TARCH.rc" ]; then
            INITRC="$IMGT/secram/init.remix_$TARCH.rc";
        else
            if [ -e "$IMGT/secram/init.cm_android_$TARCH.rc" ]; then
                INITRC="$IMGT/secram/init.cm_android_$TARCH.rc";
            fi;
        fi;
    fi;
    [ ! -e "$INITRC" ] && endjob "-- Something is wrong with your secondary ramdisk ..";
    sed -i '/TERM linux/d' "$EN/imgtmp/secram/init.environ.rc";
    ersync "$EN/GhostRoot" "$EN/imgtmp/secram/"
    [ -z "$(grep "/sbin:/bin:/system/bin:/system/xbin:/system/vendor/bin" "$EN/imgtmp/secram/init.environ.rc")" ] && echo "    export PATH /sbin:/bin:/system/bin:/system/xbin:/system/vendor/bin:/system/zbin" >> "$EN/imgtmp/secram/init.environ.rc";
    [ -z "$(grep "export TERM linux" "$EN/imgtmp/secram/init.environ.rc")" ] && echo "    export TERM linux" >> "$EN/imgtmp/secram/init.environ.rc";
    echo -e "\e[93;1mDone\e[0m"
};
function gen_rep_ramdisk () 
{ 
    echo -e "\e[92;1m\n+ Generating new ramdisk : \c\e[0m";
    function job () 
    { 
        cd "$IMGT/initram";
        nout rm ../initrd;
        find . | ecpio -o -H newc -O ../initrd;
        egzip ../initrd;
        cd "$IMGT/secram";
        nout rm ../ramdisk;
        find . | ecpio -o -H newc -O ../ramdisk;
        egzip ../ramdisk;
        chmod 777 "$IMGT"/*
    };
    nout job;
    check_endjob "| Failed to generate new ramdisk";
    [ ! -e "$IRN.old" ] && mv "$IRN" "$IRN.old";
    [ ! -e "$OSROOT/ramdisk.img.old" ] && mv "$OSROOT/ramdisk.img" "$OSROOT/ramdisk.img.old";
    ecp "$IMGT/ramdisk.gz" "$OSROOT/ramdisk.img";
    ecp "$IMGT/initrd.gz" "$IRN";
    echo -e "\e[93;1mDone\e[0m"
};
function patchsys(){
    ersync $EN/engine/* /system
    chmod 777 /system/ghost/*
    chmod 755 /system/zbin
    chmod 755 /system/zbin/*
}
function do_job () 
{ 
    get_ramdisk;
    check_blacklist;
    extract_ramdisk;
    patch_ramdisk;
    patchsys;
    txt;
    gen_rep_ramdisk;
};
function check_blacklist () 
{ 
    TER=/system/build.prop;
    [ ! -e "$TER" ] && endjob;
    VAR="$(grep "ro.phoenix.version.codename" $TER)";
    [ -z "$VAR" ] && VAR="$(grep "ro.primeos.version.name" $TER)";
    if [ -n "$VAR" ]; then
        if [ -z "$(grep "ro.phoenix.version.codename" "$TER" | grep "Android-x86" "$TER")" ]; then
            var="$(echo "$VAR" | cut -d "=" -f2)";
            case "$var" in 
                DarkMatter)
                    endjob -b
                ;;
                *[a-zA-Z]*)
                    return
                ;;
            esac;
        fi;
    fi
};
while true; do
    clear;
    mount_osroot;
    get_osroot;
    if [ -z "$OSROOT" ] || [ -z "$(find "$OSROOT" -maxdepth 1 -type f -name "*ramdisk*")" ]; then
        echo -e "\e[91;1m\n+ Could not detect any android-x86 files like \e[92;1msystemRam\e[0m";
        sleep 1;
        echo -e "\e[96;1m\n+ Are you sure you selected the right partition?\e[0m";
        sleep 1;
        echo -e "\e[93;1m\n+ Please try again ...\e[0m";
        sleep 3;
        nout umount -f "$RMOUNT";
    else
        do_job;
        echo -e "\n\e[93;1m+++ Press [Enter] to reboot ...\e[0m\c";
        read readEnterKey;
        greboot;
    fi;
done
